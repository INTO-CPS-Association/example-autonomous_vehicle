class Controller

	thread periodic(100E6, 0 ,0, 0)(Step);
		
	instance variables
		private sensorGNSS_Pos: SensorGNSS;
		private actuatorAngle : ActuatorSteering;
		private actuatorSpeed : ActuatorSpeed;
		private steering: SteeringController;
		private steering_controllers : seq of SteeringController := [new AngleSteeringController()];
		private old_tick: int := 0;
		private delta: real := 0.0;
		private speed: real := 0.0;
		private gC: GuidanceController;
		private PosGNSS: seq of real := [0.0, 0.0, 0.0, 0.0];
		private PosGNSS_c: seq of real := [0.0, 0.0, 0.0, 0.0];
		private old_pos: seq of real := [0.0, 0.0, 0.0, 0.0];
		private test_a: real := 0;
				
	operations
	
		public IsFinished: () ==> bool
			IsFinished() == gC.IsFinished();
	
		public Controller: SensorGNSS * ActuatorSteering * ActuatorSpeed ==> Controller
		Controller(gnss_pos,aSt,aSp) == (
			sensorGNSS_Pos := gnss_pos;
			actuatorAngle :=  aSt;
			actuatorSpeed := aSp;
			
			steering := steering_controllers(1);
			
			steering.setControlParameter(HardwareInterface`control_parameter);
			
			gC := new GuidanceController();
			
			gC.setLookAheadDistance(HardwareInterface`look_ahead_dist);
			
			steering.UpdateWaypoint([gC.getWayPoint1().PosX(),gC.getWayPoint1().PosY()],[gC.getWayPoint2().PosX(),gC.getWayPoint2().PosY()]);
		);
		
		public Step : () ==> ()
		Step () == cycles(2)(
			if not IsFinished() then (
				
				sensorGNSS_Pos.Sync();
				delta := 0.0;
				PosGNSS := sensorGNSS_Pos.read();
				PosGNSS_c(1) := PosGNSS(1);
				PosGNSS_c(2) := PosGNSS(2);
				PosGNSS_c(3) := PosGNSS(3);
				
				if 0.6 < MATH`sqrt((old_pos(1)-PosGNSS(1))*(old_pos(1)-PosGNSS(1))+(old_pos(2)-PosGNSS(2))*(old_pos(2)-PosGNSS(2))) then
				(
					old_pos := PosGNSS;
				);
				
				gC.UpdateRoute(PosGNSS);
				
				steering.UpdateWaypoint([gC.getWayPoint1().PosX(),gC.getWayPoint1().PosY()],[gC.getWayPoint2().PosX(),gC.getWayPoint2().PosY()]);
				
				delta := steering.Output(PosGNSS);
				speed := HardwareInterface`speed_ref.getValue();				
			)else(
			  delta := 0.0;
				speed := 0.0;
			);
			
			actuatorAngle.setValue(delta);
			actuatorSpeed.setValue(speed);
			
		);
		
		
	private atan2: real * real ==> real
		atan2(y,x) == (
			dcl result: real;
			result := 0;
			
			if x > 0 then
			(
				result := MATH`atan(y/x);
			);
			if y>= 0 and x < 0 then
			(
				result := MATH`atan(y/x)+MATH`pi;
			);
			if y< 0 and x < 0 then
			(
				result := MATH`atan(y/x)-MATH`pi;
			);
			if y > 0 and x = 0 then
			(
				result := MATH`pi/2.0;
			);
			if y < 0 and x = 0 then
			(
				result := -MATH`pi/2.0;
			);
			return result;
		);

end Controller